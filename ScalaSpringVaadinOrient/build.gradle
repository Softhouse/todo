apply plugin: 'scala'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'

eclipse {
	project {
		name = "todo"
		natures "org.springframework.ide.eclipse.core.springnature"
	}
	classpath {
		containers += 'org.scala-ide.sdt.launching.SCALA_CONTAINER'
	}
}

repositories {
	mavenCentral()
	mavenRepo(url: 'http://maven.vaadin.com/vaadin-addons')
	mavenRepo(url: 'https://oss.sonatype.org/content/groups/public')
	mavenRepo(url: 'https://oss.sonatype.org/content/repositories/snapshots')
	mavenRepo(url: 'http://maven.springframework.org/release')
	mavenRepo(url: 'http://maven.springframework.org/milestone')
	mavenRepo(url: 'http://repository.springsource.com/maven/bundles/release')
	mavenRepo(url: 'http://repository.springsource.com/maven/bundles/external')
}

configurations {
	gwtTools
}

dependencies {
	// Libraries needed to run the scala tools
	scalaTools 'org.scala-lang:scala-compiler:2.9.2'
	scalaTools 'org.scala-lang:scala-library:2.9.2'

	// Libraries needed for scala api
	compile 'org.scala-lang:scala-library:2.9.2'
	compile 'org.scalaj:scalaj-collection_2.9.1:1.2'
	
	// Vaadin libraries
	compile 'com.vaadin:vaadin:6.7.6'
	compile 'org.vaadin.addons:scaladin:1.0.0'
	compile 'org.vaadin.addons:refresher:1.1.1'
	compile 'org.vaadin.addons:filteringtable:0.5.3'
	compile 'org.vaadin.addons:popupbutton:1.2.1'
	compile 'org.vaadin.addons:searchfield:2.2.0'
	
	// Orchid + spring dependencies
	compile 'se.softhouse.garden:orchid-spring:0.6-SNAPSHOT'
	
	// OrientDB
	compile 'com.orientechnologies:orient-commons:1.0'
	compile 'com.orientechnologies:orientdb-core:1.0'

	// Needed to compile the widgetset
	gwtTools 'com.google.gwt:gwt-user:2.3.0'
	gwtTools 'com.google.gwt:gwt-dev:2.3.0'
	
	providedCompile  'javax.servlet:javax.servlet-api:3.0.1'
	
	testCompile 'junit:junit:4.10'
	testCompile 'com.google.gwt:gwt-user:2.3.0'
	testCompile 'org.springframework:spring-instrument:3.0.5.RELEASE'
}

task compileWidgetset << {
	
	ant.java(classname:'com.google.gwt.dev.Compiler', failOnError: 'true', fork: 'true')
	{
		jvmarg(value: '-Xss1024k')
		arg(line: '-logLevel INFO')
		arg(line: '-war '+webAppDirName+'/VAADIN/widgetsets')
		arg(value: findWidgetset("${projectDir}/src/main/resources/"))
		classpath {
			pathElement(path: sourceSets.main.resources.srcDirs.join(":"))
			pathElement(path: configurations.compile.asPath)
			pathElement(path: configurations.gwtTools.asPath)
		}
	}
}

def findWidgetset(String path) {
	def files = []
	new File(path).traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.gwt\.xml$/) { it -> files << it.absolutePath.minus(path).minus(".gwt.xml") .replaceAll("/",".")}
	if(files.isEmpty()) throw new GradleException('No Widgetset found')
	files.getAt(0)
}
